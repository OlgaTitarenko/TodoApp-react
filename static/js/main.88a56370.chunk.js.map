{"version":3,"sources":["serviceWorker.js","Todo.js","index.js"],"names":["Boolean","window","location","hostname","match","Todo","state","todos","id","text","done","isVisible","filterBy","oldTodos","showOld","newItemText","checkAll","onNewItemTextChange","_this","setState","onItemAdded","event","preventDefault","_ref","newTodo","Date","concat","Object","toConsumableArray","index","this","prevState","newTodos","map","todo","prewState","newCheckAll","objectSpread","filter","item","oldTodo","typeButton","_this$state","_this2","filterTodos","react_default","a","createElement","className","type","name","checked","onChange","onAllItemsCheck","onSubmit","value","target","Item","key","onCheckedChange","onDelete","onDeleteItem","onClick","onButtonClick","onButtonCleanDone","onButtonShowOld","length","Old","showStatus","React","Component","_ref2","children","styleLi","_ref3","ReactDOM","render","src_Todo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88a56370.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nclass Todo extends React.Component {\r\n    state = {\r\n        todos: [\r\n            { id: 1, text: \"111\", done: false, isVisible: true },\r\n            { id: 2, text: \"222\", done: true, isVisible: true },\r\n            { id: 3, text: \"333\", done: false, isVisible: true }\r\n        ],\r\n        filterBy:'',\r\n        oldTodos: [],\r\n        showOld: false,\r\n        newItemText: '',\r\n        checkAll: false\r\n    };\r\n\r\n    onNewItemTextChange = text => {\r\n        this.setState({\r\n            newItemText: text\r\n        });\r\n    };\r\n\r\n    onItemAdded = (event) => {\r\n        event.preventDefault();\r\n        if (\"\" === this.state.newItemText) {\r\n            return;\r\n        }\r\n        this.setState(({todos, newItemText}) => {\r\n            const newTodo = {\r\n                id: +(new Date()),\r\n                text: newItemText,\r\n                done: false,\r\n                isVisible: true\r\n            };\r\n            return {\r\n                todos: [...todos, newTodo],\r\n                newItemText: \"\"\r\n            };\r\n        })\r\n    }\r\n\r\n    onCheckedChange(index) {\r\n        this.setState((prevState) => {\r\n            let newTodos = prevState.todos;\r\n            newTodos.map((todo) => {\r\n                if (todo.id === index) {\r\n                    todo.done = !todo.done;\r\n\r\n                }\r\n            });\r\n            return {\r\n                todos: newTodos\r\n            }\r\n        })\r\n    }\r\n\r\n    onAllItemsCheck() {\r\n        this.setState((prewState)=>{\r\n            const newCheckAll = !prewState.checkAll;\r\n            const newTodos = prewState.todos.map(todo => ({...todo, done: newCheckAll}));\r\n            return {\r\n                todos : newTodos,\r\n                checkAll : newCheckAll\r\n            }\r\n        });\r\n    }\r\n\r\n    onDeleteItem(index) {\r\n        this.setState((prevState) => {\r\n            const todos = prevState.todos.filter(item => item.id !== index);\r\n            const oldTodo = prevState.todos.filter(item => item.id === index);\r\n            const oldTodos =[ ...prevState.oldTodos, oldTodo];\r\n            return {\r\n                todos,\r\n                oldTodos\r\n            };\r\n        });\r\n    }\r\n\r\n    onButtonClick(typeButton) {\r\n        this.setState({filterBy: typeButton})\r\n    }\r\n    onButtonCleanDone() {\r\n        this.setState((prevState) => {\r\n            const todos = prevState.todos.filter(item => !item.done);\r\n            const oldTodos = prevState.todos.filter(item => item.done);\r\n            return {\r\n                todos,\r\n                oldTodos : [...prevState.oldTodos, ...oldTodos]\r\n            };\r\n        });\r\n    }\r\n\r\n    onButtonShowOld() {\r\n        this.setState((prevState) => {\r\n            return { showOld: !prevState.showOld }\r\n        })\r\n    }\r\n\r\n    filterTodos() {\r\n        const {todos, filterBy} = this.state;\r\n        switch (filterBy) {\r\n            case 'showDone': return todos.filter(todo => todo.done);\r\n            case 'showActive': return todos.filter(todo => !todo.done);\r\n            default: return todos;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const state =  this.filterTodos();\r\n\r\n        return (\r\n            <div className=\"Todo\">\r\n                <h2 className=\"Todo__title\">My Todo</h2>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    name=\"chackAll\"\r\n                    checked={this.state.checkAll}\r\n                    onChange={() => this.onAllItemsCheck()}\r\n                />\r\n                <form onSubmit={this.onItemAdded}>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"Todo__new-item-text\"\r\n                        value={this.state.newItemText}\r\n                        onChange={event => {\r\n                            this.onNewItemTextChange(event.target.value);\r\n                        }}\r\n                    />\r\n                    <button  className=\"Todo__add-button\" >\r\n                        Add\r\n                    </button>\r\n                </form>\r\n                <ul className=\"Todo__list\">\r\n                    {state.map(todo => (\r\n                        <Todo.Item\r\n                            key={todo.id}\r\n                            value={todo.id}\r\n                            checked={todo.done}\r\n                            onChange={() => this.onCheckedChange(todo.id)}\r\n                            onDelete={() => this.onDeleteItem(todo.id)}\r\n                        >\r\n                            {todo.text}\r\n                        </Todo.Item>\r\n                    ))}\r\n                </ul>\r\n                <br />\r\n                <button\r\n                    className=\"Todo__add-button\"\r\n                    onClick={() => this.onButtonClick('showAll')}\r\n                >\r\n                    All\r\n                </button>\r\n                <button\r\n                    className=\"Todo__add-button\"\r\n                    onClick={() => this.onButtonClick('showDone')}\r\n                >\r\n                    Done\r\n                </button>\r\n                <button\r\n                    className=\"Todo__add-button\"\r\n                    onClick={() => this.onButtonClick('showActive')}\r\n                >\r\n                    Active\r\n                </button>\r\n                <button\r\n                    className=\"Todo__add-button\"\r\n                    onClick={() => this.onButtonCleanDone()}\r\n                >\r\n                    Clear done\r\n                </button>\r\n                <button\r\n                    className=\"Todo__add-button\"\r\n                    onClick={() => this.onButtonShowOld()}\r\n                >\r\n                    Show cleared todo\r\n                </button>\r\n                <p>{state.length} has left</p>\r\n                <Todo.Old showStatus={this.state.showOld} oldTodos={this.state.oldTodos} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTodo.Item = ({  value, children, checked, onChange, onDelete }) => {\r\n    const styleLi = checked ? \"Todo__item Todo__item_done\" : \"Todo__item\";\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"checkbox\"\r\n                name=\"todoItem\"\r\n                checked={checked}\r\n                onChange={() => onChange()}\r\n            />\r\n            <li className={styleLi} key={value}>\r\n                {children}\r\n                <button onClick={() => onDelete()}>x</button>\r\n            </li>\r\n        </div>\r\n    );\r\n};\r\n\r\nTodo.Old = ({ showStatus, oldTodos }) => {\r\n    if (!showStatus) {\r\n        return <div>Work to done todos! =^_^=</div>;\r\n    } else {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {oldTodos.map(todo =>\r\n                <li key={todo.id}>\r\n                    {todo.text}\r\n                </li>\r\n                ) }\r\n            </ul>\r\n        </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Todo from './Todo';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n          <Todo />\n        </div>\n);\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}