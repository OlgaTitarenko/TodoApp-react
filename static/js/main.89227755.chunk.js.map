{"version":3,"sources":["serviceWorker.js","Todo.js","index.js"],"names":["Boolean","window","location","hostname","match","Todo","state","todos","value","text","done","isVisible","oldTodos","showOld","newItemText","checkAll","onNewItemTextChange","_this","setState","console","log","onItemAdded","event","preventDefault","_ref","newTodo","length","concat","Object","toConsumableArray","index","this","prevState","newTodos","map","todo","prewState","newCheckAll","forEach","item","filter","typeButton","_this2","react_default","a","createElement","className","type","name","checked","onChange","onAllItemsCheck","onSubmit","target","Item","key","onCheckedChange","onDelete","onDeleteItem","onClick","onButtonClick","Old","showStatus","React","Component","_ref2","children","styleLi","_ref3","ReactDOM","render","src_Todo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89227755.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nclass Todo extends React.Component {\r\n    state = {\r\n        todos: [\r\n            { value: 1, text: \"111\", done: false, isVisible: true },\r\n            { value: 2, text: \"222\", done: true, isVisible: true },\r\n            { value: 3, text: \"333\", done: false, isVisible: true }\r\n        ],\r\n        oldTodos: [],\r\n        showOld: false,\r\n        newItemText: '',\r\n        checkAll: false\r\n    };\r\n\r\n    onNewItemTextChange = text => {\r\n        this.setState({\r\n            newItemText: text\r\n        });\r\n        console.log(this.state.newItemText);\r\n    };\r\n\r\n    onItemAdded = (event) => {\r\n        event.preventDefault();\r\n        if (\"\" === this.state.newItemText) {\r\n            return;\r\n        }\r\n        this.setState(({todos, newItemText}) => {\r\n            const newTodo = {\r\n                value: todos.length + 1,\r\n                text: newItemText,\r\n                done: false,\r\n                isVisible: true\r\n            };\r\n            return {\r\n                todos: [...todos, newTodo],\r\n                newItemText: \"\"\r\n            };\r\n        });\r\n        /*\r\n        if (event.key === \"Enter\") {\r\n            if (\"\" === this.state.newItemText) {\r\n                return;\r\n            }\r\n            this.setState(({ todos, newItemText }) => {\r\n                let newTodo = {\r\n                    value: todos.length + 1,\r\n                    text: newItemText,\r\n                    done: false,\r\n                    isVisible: true\r\n                };\r\n                return {\r\n                    todos: [...todos, newTodo],\r\n                    newItemText: \"\"\r\n                };\r\n            });\r\n        }*/\r\n    }\r\n\r\n    onCheckedChange(index) {\r\n        this.setState((prevState) => {\r\n            let newTodos = prevState.todos;\r\n            newTodos.map((todo) => {\r\n                if (todo.value === index) {\r\n                    todo.done = !todo.done;\r\n                }\r\n            });\r\n            return {\r\n                todos : newTodos\r\n            };\r\n          })\r\n    }\r\n\r\n    onAllItemsCheck() {\r\n        this.setState((prewState)=>{\r\n            let newTodos = [...prewState.todos];\r\n            const newCheckAll = !prewState.checkAll;\r\n            newTodos.forEach((item)=> item.done = newCheckAll);\r\n            return {\r\n                todos : newTodos,\r\n                checkAll : newCheckAll\r\n            }\r\n        });\r\n    }\r\n\r\n    onDeleteItem(todo) {\r\n        this.setState((prevState) => {\r\n            const todos = prevState.todos.filter(item => item !== todo);\r\n            const oldText =[ ...prevState.oldTodos, todo.text];\r\n            return {\r\n                todos: todos,\r\n                oldTodos:  oldText\r\n            };\r\n        });\r\n    }\r\n\r\n    onButtonClick(typeButton) {\r\n        if ( typeButton === 'showAll') {\r\n            this.setState((prevState) => {\r\n                let todos = prevState.todos;\r\n                todos.forEach((todo) => todo.isVisible = true);\r\n                return { todos };\r\n            });\r\n        }\r\n        if ( typeButton === 'showDone') {\r\n            this.setState((prevState) => {\r\n                const todos = prevState.todos;\r\n                todos.forEach((todo) => {\r\n                    if (todo.done) {\r\n                        todo.isVisible = true;\r\n                    } else {\r\n                        todo.isVisible = false;\r\n                    }\r\n                });\r\n                return { todos };\r\n            });\r\n        }\r\n        if ( typeButton === 'showActive') {\r\n            this.setState((prevState) => {\r\n                const todos = prevState.todos;\r\n                todos.forEach((todo) => {\r\n                    if (!todo.done) {\r\n                        todo.isVisible = true;\r\n                    } else {\r\n                        todo.isVisible = false;\r\n                    }\r\n                });\r\n                return { todos };\r\n            })\r\n        }\r\n        if ( typeButton === 'clearDone') {\r\n            this.setState((prevState) => {\r\n                const todos = prevState.todos.filter(item => !item.done);\r\n                const oldTodos = prevState.todos.filter(item => item.done);\r\n                return {\r\n                    todos,\r\n                    oldTodos : [...prevState.oldTodos, ...oldTodos]\r\n                };\r\n            });\r\n        }\r\n        if ( typeButton === 'showOld') {\r\n            this.setState({\r\n                showOld: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const state = this.state.todos.filter(todo => todo.isVisible === true);\r\n\r\n        return (\r\n            <div className=\"Todo\">\r\n                <h2 className=\"Todo__title\">My Todo</h2>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    name=\"chackAll\"\r\n                    checked={this.state.checkAll}\r\n                    onChange={() => this.onAllItemsCheck()}\r\n                />\r\n                <form onSubmit={this.onItemAdded}>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"Todo__new-item-text\"\r\n                        value={this.state.newItemText}\r\n                        onChange={event => {\r\n                            this.onNewItemTextChange(event.target.value);\r\n                        }}\r\n                    />\r\n                    <button  className=\"Todo__add-button\" >\r\n                        Add\r\n                    </button>\r\n                </form>\r\n                <ul className=\"Todo__list\">\r\n                    {state.map(todo => (\r\n                        <Todo.Item\r\n                            key={todo.value}\r\n                            value={todo.value}\r\n                            checked={todo.done}\r\n                            onChange={() => this.onCheckedChange(todo.value)}\r\n                            onDelete={() => this.onDeleteItem(todo)}\r\n                        >\r\n                            {todo.text}\r\n                        </Todo.Item>\r\n                    ))}\r\n                </ul>\r\n                <br />\r\n                <button\r\n                    className=\"Todo__add-button\"\r\n                    onClick={() => this.onButtonClick('showAll')}\r\n                >\r\n                    All\r\n                </button>\r\n                <button\r\n                    className=\"Todo__add-button\"\r\n                    onClick={() => this.onButtonClick('showDone')}\r\n                >\r\n                    Done\r\n                </button>\r\n                <button\r\n                    className=\"Todo__add-button\"\r\n                    onClick={() => this.onButtonClick('showActive')}\r\n                >\r\n                    Active\r\n                </button>\r\n                <button\r\n                    className=\"Todo__add-button\"\r\n                    onClick={() => this.onButtonClick('clearDone')}\r\n                >\r\n                    Clear done\r\n                </button>\r\n                <button\r\n                    className=\"Todo__add-button\"\r\n                    onClick={() => this.onButtonClick('showOld')}\r\n                >\r\n                    Show cleared todo\r\n                </button>\r\n                <p>{state.length} has left</p>\r\n                <Todo.Old showStatus={this.state.showOld} oldTodos={this.state.oldTodos} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTodo.Item = ({ value, children, checked, onChange, onDelete }) => {\r\n    const styleLi = checked ? \"Todo__item Todo__item_done\" : \"Todo__item\";\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"checkbox\"\r\n                name=\"todoItem\"\r\n                checked={checked}\r\n                onChange={() => onChange()}\r\n            />\r\n            <li className={styleLi}>\r\n                {children}\r\n                <button onClick={() => onDelete()}>x</button>\r\n            </li>\r\n        </div>\r\n    );\r\n};\r\n\r\nTodo.Old = ({ showStatus, oldTodos }) => {\r\n    if (!showStatus) {\r\n        return <div>Work to done todos! =^_^=</div>;\r\n    } else {\r\n        console.log(oldTodos);\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {oldTodos.map(todo =>\r\n                <li key={todo.value}>\r\n                    {todo.text}\r\n                </li>\r\n                ) }\r\n            </ul>\r\n        </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Todo from './Todo';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n          <Todo />\n        </div>\n);\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}