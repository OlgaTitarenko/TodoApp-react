{"version":3,"sources":["serviceWorker.js","Todo.js","index.js"],"names":["Boolean","window","location","hostname","match","Todo","state","todos","value","text","done","isVisible","oldTodos","showOld","newItemText","checkAll","onNewItemTextChange","_this","setState","event","this","key","_ref","newTodo","length","concat","Object","toConsumableArray","_ref2","todo","todoChecked","check","map","filter","item","push","_this2","react_default","a","createElement","className","type","name","checked","onChange","onAllItemsCheck","target","onKeyPress","onItemAdded","onClick","onButtonAdded","Item","onCheckedChange","onDelete","onDeleteItem","onButtonAll","onButtonDone","onButtonActive","onButtonClearDone","onButtonShowOld","Old","showStatus","React","Component","_ref3","children","styleLi","_ref4","console","log","resultDiv","ReactDOM","render","src_Todo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.749dd42f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nclass Todo extends React.Component {\r\n    state = {\r\n        todos: [\r\n            { value: 1, text: \"111\", done: false, isVisible: true },\r\n            { value: 2, text: \"222\", done: true, isVisible: true },\r\n            { value: 3, text: \"333\", done: false, isVisible: true }\r\n        ],\r\n        oldTodos: [],\r\n        showOld: false,\r\n        newItemText: \"\",\r\n        checkAll: false\r\n    };\r\n\r\n    onNewItemTextChange = text => {\r\n        this.setState({\r\n            newItemText: text\r\n        });\r\n    };\r\n\r\n    onItemAdded(event) {\r\n        if (\"\" === this.state.newItemText) {\r\n            return;\r\n        }\r\n        if (event.key === \"Enter\") {\r\n            this.setState(({ todos, newItemText }) => {\r\n                let newTodo = {\r\n                    value: todos.length + 1,\r\n                    text: newItemText,\r\n                    done: false,\r\n                    isVisible: true\r\n                };\r\n\r\n                return {\r\n                    todos: [...todos, newTodo],\r\n                    newItemText: \"\"\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    onButtonAdded() {\r\n        if (\"\" === this.state.newItemText) {\r\n            return;\r\n        }\r\n        this.setState(({ todos, newItemText }) => {\r\n            let newTodo = {\r\n                value: todos.length + 1,\r\n                text: newItemText,\r\n                done: false,\r\n                isVisible: true\r\n            };\r\n\r\n            return {\r\n                todos: [...todos, newTodo],\r\n                newItemText: \"\"\r\n            };\r\n        });\r\n    }\r\n    onCheckedChange(todo) {\r\n        const todoChecked = todo;\r\n        todoChecked.done = !todoChecked.done;\r\n        this.setState({ todoChecked });\r\n    }\r\n\r\n    onAllItemsCheck() {\r\n        let todo = this.state;\r\n        todo.checkAll = !todo.checkAll;\r\n        const check = todo.checkAll;\r\n        todo.todos.map(todo => {\r\n            todo.done = check;\r\n        });\r\n        this.setState({ todo });\r\n    }\r\n\r\n    onDeleteItem(todo) {\r\n        const todos = this.state.todos.filter(item => item !== todo);\r\n        const oldTodos = this.state.oldTodos;\r\n        oldTodos.push(todo);\r\n        this.setState({ todos, oldTodos });\r\n    }\r\n\r\n    onButtonAll() {\r\n        const todos = this.state.todos;\r\n        todos.map(todo => {\r\n            todo.isVisible = true;\r\n        });\r\n        this.setState({ todos });\r\n    }\r\n\r\n    onButtonDone() {\r\n        const todos = this.state.todos;\r\n        todos.map(todo => {\r\n            if (!todo.done) {\r\n                todo.isVisible = false;\r\n            }\r\n        });\r\n        this.setState({ todos });\r\n    }\r\n\r\n    onButtonActive() {\r\n        const todos = this.state.todos;\r\n        todos.map(todo => {\r\n            if (todo.done) {\r\n                todo.isVisible = false;\r\n            }\r\n        });\r\n        this.setState({ todos });\r\n    }\r\n\r\n    onButtonClearDone() {\r\n        const todos = this.state.todos.filter(item => !item.done);\r\n        const oldTodos = this.state.todos.filter(item => item.done);\r\n        this.setState({ todos, oldTodos });\r\n    }\r\n\r\n    onButtonShowOld() {\r\n        this.setState({\r\n            showOld: true\r\n        });\r\n    }\r\n    render() {\r\n        const state = this.state.todos.filter(todo => todo.isVisible === true);\r\n        return (\r\n            <div className=\"Todo\">\r\n            <h2 className=\"Todo__title\">My Todo</h2>\r\n        <input\r\n        type=\"checkbox\"\r\n        name=\"chackAll\"\r\n        checked={state.checkAll}\r\n        onChange={() => this.onAllItemsCheck()}\r\n        />\r\n        <input\r\n        type=\"text\"\r\n        className=\"Todo__new-item-text\"\r\n        value={state.newItemText}\r\n        onChange={event => {\r\n            this.onNewItemTextChange(event.target.value);\r\n        }}\r\n        onKeyPress={event => {\r\n            this.onItemAdded(event);\r\n        }}\r\n        />\r\n        <button\r\n        className=\"Todo__add-button\"\r\n        onClick={() => this.onButtonAdded()}\r\n    >\r\n        Add\r\n        </button>\r\n        <ul className=\"Todo__list\">\r\n            {state.map(todo => (\r\n                    <Todo.Item\r\n                key={todo.value}\r\n                value={todo.value}\r\n                checked={todo.done}\r\n                onChange={() => this.onCheckedChange(todo)}\r\n        onDelete={() => this.onDeleteItem(todo)}\r\n    >\r\n        {todo.text}\r\n    </Todo.Item>\r\n    ))}\r\n    </ul>\r\n\r\n        <br />\r\n        <button className=\"Todo__add-button\" onClick={() => this.onButtonAll()}>\r\n        All\r\n        </button>\r\n        <button\r\n        className=\"Todo__add-button\"\r\n        onClick={() => this.onButtonDone()}\r\n    >\r\n        Done\r\n        </button>\r\n        <button\r\n        className=\"Todo__add-button\"\r\n        onClick={() => this.onButtonActive()}\r\n    >\r\n        Active\r\n        </button>\r\n        <button\r\n        className=\"Todo__add-button\"\r\n        onClick={() => this.onButtonClearDone()}\r\n    >\r\n        Clear done\r\n        </button>\r\n        <button\r\n        className=\"Todo__add-button\"\r\n        onClick={() => this.onButtonShowOld()}\r\n    >\r\n        Show cleared todo\r\n        </button>\r\n        <p>{state.length} has left</p>\r\n        <Todo.Old showStatus={this.state.showOld} value={this.state.oldTodos} />\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nTodo.Item = ({ value, children, checked, onChange, onDelete }) => {\r\n    const styleLi = checked ? \"Todo__item Todo__item_done\" : \"Todo__item\";\r\n    return (\r\n        <div>\r\n        <input\r\n    type=\"checkbox\"\r\n    name=\"todoItem\"\r\n    checked={checked}\r\n    onChange={() => onChange()}\r\n    />\r\n    <li className={styleLi}>\r\n        {children}\r\n        <button onClick={() => onDelete()}>x</button>\r\n    </li>\r\n    </div>\r\n);\r\n};\r\n\r\nTodo.Old = ({ showStatus, value }) => {\r\n    if (!showStatus) {\r\n        return <div>Clear todo what you done</div>;\r\n    }\r\n    if (0 === value.length) {\r\n        return <div>No done todos, make clear</div>;\r\n    }\r\n\r\n    if (1 === value.length) {\r\n        console.log(value[0]);\r\n        return <div>{value[0].text}</div>;\r\n    }\r\n    if (value.length > 1) {\r\n        let resultDiv = \"\";\r\n        value.map(item => {\r\n            resultDiv += \" --- \" + item.text;\r\n        });\r\n        return <div>{resultDiv}</div>;\r\n    }\r\n    return (<div>Work with smile =^_^= </div>);\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Todo from './Todo';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n          <Todo />\n        </div>\n);\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}